import logging
from datetime import date

import aiogram.contrib.fsm_storage.memory
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from keyboards import keyboards
from config import BOT_TOKEN
from database import dbase
from functions import *
from states import *
import mail


# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
storage = aiogram.contrib.fsm_storage.memory.MemoryStorage()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

db = dbase()


# ______________________ [/info, /help] ______________________ #
@dp.message_handler(state='*', commands=['info', 'help'])
async def info(message: types.Message):
    text = """
–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —é–Ω–æ—à–µ—Å–∫–æ–≥–æ –∫–ª—É–±–∞ GOLD.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —É—á–µ–Ω–∏–∫–∞–º–∏, –ø—Ä–æ–π–¥—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ü–∞—é –∏ –∑–∞–ø–∏—Å–∞–≤—à–∏—Å—å —Ö–æ—Ç—è –±—ã –Ω–∞ 1 —Å–µ–∫—Ü–∏—é.

–ó–¥–µ—Å—å —É—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è.

–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

–ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start.
–õ–∏—Ü–æ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞: @Golden_Good_Boy
    """
    await message.answer(text)


# ______________________ [/start] ______________________ #
@dp.message_handler(state='*', commands=['start', 'cancel'])
async def bot_start(message: types.Message, state: FSMContext):
    await state.finish()
    await state.reset_data()
    text = """
–ë–æ—Ç —é–Ω–æ—à–µ—Å–∫–æ–≥–æ –∫–ª—É–±–∞ "GOLD"

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /info –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        """

    if db.is_user_login(message.from_user.id):
        role = str(db.get_role(message.from_user.id))
        rm = keyboards.login_menu[role]
        st = 'auth-' + role

    else:
        rm = keyboards.unlogin_kb
        st = 'unauth'
        text += "\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è/–∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è"


    await state.set_state(st)
    await message.answer(text, reply_markup=rm)


# ______________________ UNAUTH ______________________ #
@dp.message_handler(state='unauth')
async def main_menu(message: types.Message, state: FSMContext):
    if message.text == '‚úç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        await RegistrationForm.Email.set()
        text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!

–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É (–≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–æ–¥-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        """
        await message.answer(text, reply_markup=keyboards.rm_kb)

    elif message.text == 'üóù –í—Ö–æ–¥':
        await LoginForm.Email.set()
        text = """
*–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

–í–≤–µ–¥–∏—Ç–µ Email –∏ –ø–∞—Ä–æ–ª—å –≤ –¥–≤—É—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        """
        await message.answer(text, reply_markup=keyboards.rm_kb)

    elif message.text == 'üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π':
        lessons = db.get_all_lessons()
        text = print_lessons(lessons)
        await message.answer(text)


# ______________________LOGIN______________________#
@dp.message_handler(state=LoginForm.Email)
async def login1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Email'] = message.text
    await LoginForm.next()


@dp.message_handler(state=LoginForm.Password)
async def login2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        psd = encrypt_password(message.text)
        email = data['Email']
    isCorrect, user = db.login(email, psd, message.from_user.id)
    if isCorrect:
        await state.finish()
        await state.reset_data()

        if user[-2]:
            st = dp.current_state(chat=user[-2])
            await bot.send_message(user[-2], '[–í–Ω–∏–º–∞–Ω–∏–µ!]\n\n–ë—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤—Ö–æ–¥ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', reply_markup=keyboards.rm_kb)
            await st.set_state('unauth')

        role = str(db.get_role(message.from_user.id))
        rm = keyboards.login_menu[role]

        await state.set_state('auth-'+role)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', reply_markup=rm)
        await message.delete()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å\n\n–í–≤–µ–¥–∏—Ç–µ email')
        await LoginForm.previous()


# ______________________REGISTRATION______________________ #
@dp.message_handler(state=RegistrationForm.Email)
async def reg_1(message: types.Message, state: FSMContext):
    code = generate_code(length=4)
    mail.send_email(TO=message.text, msg=mail.generate_reg_mail(message.text, code))
    async with state.proxy() as data:
        data['EmailCode'] = str(code)
        data['Email'] = message.text
    await RegistrationForm.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')


@dp.message_handler(state=RegistrationForm.ActivateEmail, commands='again')
async def reg_2(message: types.Message, state: FSMContext):
    code = generate_code(length=4)
    async with state.proxy() as data:
        user_email = data['Email']
    mail.send_email(TO=user_email, msg=mail.generate_reg_mail(user_email, code))
    await state.update_data(EmailCode=(code))
    await message.answer('–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')


@dp.message_handler(state=RegistrationForm.ActivateEmail)
async def reg_3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        code = data['EmailCode']
    if code == message.text:
        await state.update_data(ActivateEmail=True)
        await RegistrationForm.next()
        await message.answer('–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å')

    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /again, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –µ—â–µ —Ä–∞–∑')


@dp.message_handler(state=RegistrationForm.Password)
async def reg_4(message: types.Message, state: FSMContext):
    if is_correct_password(message.text):
        async with state.proxy() as data:
            data['Password'] = message.text

        await message.answer('*–ü–∞—Ä–æ–ª—å –±—ã–ª –ø—Ä–∏–Ω—è—Ç* \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑')
        await RegistrationForm.next()
    else:
        await message.answer('–í –ø–∞—Ä–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏ —Ü–∏—Ñ—Ä—ã.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: 6 —Å–∏–º–≤–æ–ª–æ–≤\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑')
    await message.delete()


@dp.message_handler(state=RegistrationForm.Password2)
async def reg_5(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        psd = data['Password']
        email = data['Email']
    if message.text == psd:
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=keyboards.login_menu_kb_unstudent)
        await message.delete()
        await state.finish()
        await state.reset_data()
        await state.set_state('auth-0')

        psd = encrypt_password(psd)
        db.create_new_user(email, psd, message.from_user.id)


    else:
        await RegistrationForm.previous()
        await message.answer('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        await message.delete()


# ______________________ AUTH ______________________ #
@dp.message_handler(state='auth-0')
async def auth_0(message: types.Message, state: FSMContext):

    if message.text == '‚è∞ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è':
        lessons = list(db.get_my_lessons(message.from_user.id))
        text = print_lessons(lessons)
        await message.answer(text)

    elif message.text == 'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å':
        user_data = db.get_me(message.from_user.id)
        text = print_profile(user_data)
        await message.answer(text)

    elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await state.set_state('settings')
        await message.answer(message.text, reply_markup=keyboards.settings_kb)

    elif message.text == 'üñã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ–∫—Ü–∏—é':
        user = db.get_me(message.from_user.id)
        if None not in user:
            await SignUp_Section.ChooseSection.set()
            sections = db.get_sections_not_users(message.from_user.id)
            subjects = [i[1] for i in sections]
            rm = keyboards.make_sections_kb(subjects)
            async with state.proxy() as data:
                data['sections'] = sections
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', reply_markup=rm)
        else:
            await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')

    elif message.text == 'üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π':
        lessons = db.get_all_lessons()
        text = print_lessons(lessons)
        await message.answer(text)

    elif message.text == 'üì¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å / —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        await ReportState.MakeMessage.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n[–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã]', reply_markup=keyboards.rm_kb)

    elif message.text == 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã':
        my_reports = db.show_answers_by_user_id(db.get_user_by_telegram(message.from_user.id))
        await message.answer(print_my_answers(my_reports))

@dp.message_handler(state='auth-1')
async def auth_1(message: types.Message, state: FSMContext):

    if message.text == '‚è∞ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è':
        lessons = list(db.get_my_lessons(message.from_user.id))
        text = print_lessons(lessons)
        await message.answer(text)

    elif message.text == 'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å':
        user_data = db.get_me(message.from_user.id)
        text = print_profile(user_data)
        await message.answer(text)

    elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await state.set_state('settings')
        await message.answer(message.text, reply_markup=keyboards.settings_kb)

    elif message.text == 'üñã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–µ–∫—Ü–∏—é':
        user = db.get_me(message.from_user.id)
        if None not in user:
            await SignUp_Section.ChooseSection.set()
            sections = db.get_sections_not_users(message.from_user.id)
            subjects = [i[1] for i in sections]
            rm = keyboards.make_sections_kb(subjects)
            async with state.proxy() as data:
                data['sections'] = sections
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', reply_markup=rm)
        else:
            await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')


    elif message.text == 'üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π':
        lessons = db.get_all_lessons()
        text = print_lessons(lessons)
        await message.answer(text)

    elif message.text == 'üì¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å / —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        await ReportState.MakeMessage.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n[–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã]', reply_markup=keyboards.rm_kb)

    elif message.text == 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã':
        my_reports = db.show_answers_by_user_id(db.get_user_by_telegram(message.from_user.id))
        await message.answer(print_my_answers(my_reports))


@dp.message_handler(state='auth-2')
async def auth_2(message: types.Message, state: FSMContext):

    if message.text == '‚è∞ –ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã':
        lessons = list(db.get_my_lessons_tutor(message.from_user.id))
        text = print_lessons(lessons)
        await message.answer(text)

    elif message.text == 'üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ':
        lessons = db.get_my_lessons_tutor(message.from_user.id)
        lessons = (i[0] for i in lessons)
        rm = keyboards.make_alert_kb(lessons)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–∫–æ–π —Å–µ–∫—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=rm)
        await MakeAlert.ChooseSection.set()

    elif message.text == 'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å':
        user_data = db.get_me(message.from_user.id)
        text = print_profile(user_data)
        await message.answer(text)

    elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await state.set_state('settings')
        await message.answer(message.text, reply_markup=keyboards.settings_kb)

    elif message.text == 'üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π':
        lessons = db.get_all_lessons()
        text = print_lessons(lessons)
        await message.answer(text)

    elif message.text == 'üì¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å / —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        await ReportState.MakeMessage.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n[–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã]', reply_markup=keyboards.rm_kb)

    elif message.text == 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã':
        my_reports = db.show_answers_by_user_id(db.get_user_by_telegram(message.from_user.id))
        await message.answer(print_my_answers(my_reports))


@dp.message_handler(state='auth-3')
async def auth_3(message: types.Message, state: FSMContext):

    if message.text == 'üë®üèª‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏':
        await state.set_state('work_with_tutors')
        await message.answer(message.text, reply_markup=keyboards.work_with_tutors)

    elif message.text == 'üë®üèª‚Äçüéì –£—á–µ–Ω–∏–∫–∏':
        pass

    elif message.text == 'üî¨ –†–µ–ø–æ—Ä—Ç—ã':
        reports = db.check_reports()
        async with state.proxy() as data:
            data['reports'] = reports
        text = print_report_by_id(reports[0]) + f'\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {1}'
        await message.answer(text, reply_markup=keyboards.generate_inline_kb(0))

    elif message.text == 'üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å':
        user_data = db.get_me(message.from_user.id)
        text = print_profile(user_data)
        await message.answer(text)

    elif message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await state.set_state('settings')
        await message.answer(message.text, reply_markup=keyboards.settings_kb)

    elif message.text == 'üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ':
        lessons = db.get_all_lessons()
        lessons = (i[0] for i in lessons)
        rm = keyboards.make_alert_kb(lessons)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–∞–∫–æ–π —Å–µ–∫—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=rm)
        await MakeAlert.ChooseSection.set()

    elif message.text == 'üì¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å / —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ':
        await ReportState.MakeMessage.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n[–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã]', reply_markup=keyboards.rm_kb)

    elif message.text == 'üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã':
        my_reports = db.show_answers_by_user_id(db.get_user_by_telegram(message.from_user.id))
        await message.answer(print_my_answers(my_reports))


# ______________________ WORK WITH TUTORS ____________________ #
@dp.message_handler(state='work_with_tutors')
async def work_with_tutors_1(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–Ω–∞—á–∏—Ç—å':
        await AddDeleteTutor.Email.set()
        await message.answer('üî¥ –í–≤–µ–¥–∏—Ç–µ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º', reply_markup=keyboards.rm_kb)

        async with state.proxy() as data:
            data['action'] = '–ù–∞–∑–Ω–∞—á–∏—Ç—å'

    elif message.text == '–£–±—Ä–∞—Ç—å':
        await AddDeleteTutor.Email.set()
        await message.answer('üî¥ –í–≤–µ–¥–∏—Ç–µ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=keyboards.rm_kb)

        async with state.proxy() as data:
            data['action'] = '–£–±—Ä–∞—Ç—å'

    elif message.text == 'üßæ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π':
        tutors = db.show_all_tutors()
        print(tutors)
        text = print_tutors(tutors)
        await message.answer(text)


    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–µ–∫—Ü–∏—é':
        sections = tuple((i[0] for i in db.get_all_lessons()))
        kb = keyboards.make_sections_kb(sections)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', reply_markup=kb)
        async with state.proxy() as data:
            data['sections'] = sections
        await AddTutorToSection.Section.set()

    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        await message.answer(message.text, reply_markup=keyboards.login_menu['3'])
        await state.reset_data()
        await state.set_state('auth-3')


@dp.message_handler(state=AddTutorToSection.Section)
async def add_tutor_to_section_1(message: types.Message, state: FSMContext):
    section = message.text
    tutors = db.get_tutors_with_emails()
    async with state.proxy() as data:
        sections = data['sections']
        data['section'] = section
        data['tutors'] = tutors

    if section in sections:
        await AddTutorToSection.next()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ Email –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–∫—Ü–∏—é.\n\n–í–∞–∂–Ω–æ! –ï—Å–ª–∏ —É —Å–µ–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –æ–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω', reply_markup=keyboards.make_tutors_with_email(tutors))
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —Å–µ–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞!')


@dp.message_handler(state=AddTutorToSection.Tutor)
async def add_tutor_to_section_2(message: types.Message, state: FSMContext):
    tutor = message.text
    async with state.proxy() as data:
        section = data['section']
        tutors = data['tutors']
        data['tutor'] = tutor

    if tutor in (i[0] + ' ' + i[1] + ' (' + i[2] + ')' for i in tutors):
        await AddTutorToSection.next()
        email = tutor.split(' ')[2].lstrip('(').rstrip(')')
        user = db.get_user_by_email(email)
        print(email)
        print(user)
        async with state.proxy() as data:
            data['user'] = user
        text = f"""
[–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ]

[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]

- ID: {user[0]}
- {user[1]} {user[2]}
- {user[3]}
- {user[4]}

[–î–µ–π—Å—Ç–≤–∏–µ]: 
–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–µ–∫—Ü–∏–∏ "{section}"
            """
        await message.answer(text, reply_markup=keyboards.edit_accept_cancel_kb)
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞!')


@dp.message_handler(state=AddTutorToSection.Accept)
async def add_tutor_to_section_3(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        async with state.proxy() as data:
            user = data['user']
            section = data['section']
        admin = db.get_me(message.from_user.id)[:2]
        db.add_tutor_to_section(user[0], section)
        user_tg = user[-1]

        if user_tg:
            text = f"""
[–í–Ω–∏–º–∞–Ω–∏–µ!]

–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ–∫—Ü–∏—é {section} –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!

[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]: {admin[0]} {admin[1]}

                    """
            await bot.send_message(user_tg, text=text)
        await state.finish()
        await state.reset_data()
        role = 3
        await state.set_state('auth-' + str(role))
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —Å–µ–∫—Ü–∏—é {section}!', reply_markup=keyboards.login_menu[str(role)])

    elif message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)':
        await AddTutorToSection.previous()
        await message.answer('üîò –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑')

    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await state.reset_data()
        role = 3
        await state.set_state('auth-' + str(role))
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.login_menu[str(role)])


@dp.message_handler(state=AddDeleteTutor.Email)
async def AddDeleteTutor_1(message: types.Message, state: FSMContext):
    email = message.text
    user = db.get_user_by_email(email)
    async with state.proxy() as data:
        action = data['action']
        data['user'] = user

    try:
        user_role = user[-2]
        if action == '–ù–∞–∑–Ω–∞—á–∏—Ç—å' and user_role not in ['–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–£—á–µ–Ω–∏–∫']:
            raise Exception
        if action == '–£–±—Ä–∞—Ç—å' and user_role in ['–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–£—á–µ–Ω–∏–∫', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']:
            raise Exception
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        return

    text = f"""
[–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ]

[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]

- ID: {user[0]}
- {user[1]} {user[2]}
- {user[3]}
- {user[4]}

[–î–µ–π—Å—Ç–≤–∏–µ]: {action}
    """
    await message.answer(text, reply_markup=keyboards.edit_accept_cancel_kb)
    await AddDeleteTutor.next()



@dp.message_handler(state=AddDeleteTutor.Accept)
async def AddDeleteTutor_2(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        async with state.proxy() as data:
            user = data['user']
            action = data['action']
        admin = db.get_me(message.from_user.id)[:2]

        if action == '–ù–∞–∑–Ω–∞—á–∏—Ç—å':
            db.change_user_role_by_email(user[3], 2)
        elif action == '–£–±—Ä–∞—Ç—å':
            db.change_user_role_by_email(user[3], 1)

        user_tg = user[-1]

        if user_tg:
            current_role = db.get_rolename_by_telegram_id(user[-1])
            text = f"""
[–í–Ω–∏–º–∞–Ω–∏–µ!]

–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!
–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}

[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]: {admin[0]} {admin[1]}

                """
            await bot.send_message(user_tg, text=text, reply_markup=keyboards.login_menu[current_role])
        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-' + str(role))
        await message.answer('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=keyboards.login_menu[str(role)])

    elif message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)':
        await AddDeleteTutor.previous()
        await message.answer('üîò –í–≤–µ–¥–∏—Ç–µ Email –µ—â–µ —Ä–∞–∑')

    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-' + str(role))
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.login_menu[str(role)])

# ______________________ REPORT QUERY CALLBACK ____________________ #
@dp.callback_query_handler(Text(startswith="rep"), state='auth-3')
async def report_callback(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        reports = data['reports']
    text = ''
    report_index = int(call.data.split('_')[2])

    if call.data.startswith('rep_answer_'):
        await bot.send_message(call.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=keyboards.rm_kb)
        await ReportAnswer.MakeMessage.set()
        async with state.proxy() as data:
            data['report_index'] = report_index

    if report_index > 0:
        if call.data.startswith('rep_back_'):
            try:
                text = print_report_by_id(reports[report_index-1])
                report_index -= 1
                text += f'\n\t–°—Ç—Ä–∞–Ω–∏—Ü–∞: {report_index+1}'
            except IndexError:
                text = "\n[–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞!]\n"
                report_index = -1
    elif report_index == 0:
        if call.data.startswith('rep_back_'):
            text = "\n[–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞!]\n"
            report_index = -1

    if call.data.startswith('rep_next_'):
        try:
            text = print_report_by_id(reports[report_index+1])
            report_index += 1
            text += f'\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {report_index+1}'
        except IndexError as e:
            print(e)
            text = "\n[–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞!]\n"
            report_index = len(reports)
    try:
        await call.message.edit_text(text, reply_markup=keyboards.generate_inline_kb(report_index))
    except Exception as e:
        if not call.data.startswith('rep_answer'):
            await call.answer(text='–°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –æ–∫–æ–Ω—á–µ–Ω!')
    await call.answer()


# ______________________ REPORT ANSWER ____________________ #
@dp.message_handler(state=ReportAnswer.MakeMessage)
async def report_answer_1(message: types.Message, state: FSMContext):
    msg = message.text
    async with state.proxy() as data:
        data['message'] = msg
        report_index = data['report_index']
        reports = data['reports']
    text = f"""
[–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è]

[–†–µ–ø–æ—Ä—Ç]: 
{print_report_by_id(reports[report_index])}

[–û—Ç–≤–µ—Ç]: 
{msg}
        """

    await message.answer(text, reply_markup=keyboards.edit_accept_cancel_kb)
    await ReportAnswer.next()

@dp.message_handler(state=ReportAnswer.Accept)
async def report_answer_2(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        async with state.proxy() as data:
            reports = data['reports']
            report_index = data['report_index']
            msg = data['message']
        admin_id = db.get_user_by_telegram(message.from_user.id)
        db.make_answer_on_report(reports[report_index][0], admin_id, msg)

        user_tg = db.get_telegram_by_user_id(reports[report_index][1])[0]
        print('user_tg', user_tg)
        admin = db.get_me(message.from_user.id)[:2]
        if user_tg:
            txt = f"""
–ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!
[–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ]
{reports[report_index][-2]}

[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]: {admin[0]} {admin[1]}

[–û—Ç–≤–µ—Ç]

{msg}
            """
            await bot.send_message(user_tg, txt)

        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-' + str(role))
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=keyboards.login_menu[str(role)])

    elif message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)':
        await ReportAnswer.previous()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑', reply_markup=keyboards.rm_kb)

    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-' + str(role))
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.login_menu[str(role)])

# ______________________ CHOOSE_SECTION ______________________ #
@dp.message_handler(state=SignUp_Section.ChooseSection)
async def signup_section_1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        sections = data['sections']
    print(sections)
    temp = {i[1]: i[0] for i in sections}
    if message.text in temp.keys():
        db.make_new_contract(db.get_user_by_telegram(message.from_user.id), temp[message.text])
        await state.finish()
        await state.reset_data()
        role = str(db.get_role(message.from_user.id))
        if role == '0':
            db.change_user_role_by_telegram(message.from_user.id, 1)
            role = '1'
        await state.set_state('auth-'+role)
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–µ–∫—Ü–∏—é "{message.text}"!\n–í–∞–º –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.', reply_markup=keyboards.login_menu[role])

    else:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑')


# ______________________ MAKE_ALERT ______________________ #
@dp.message_handler(state=MakeAlert.ChooseSection)
async def make_alert_1(message: types.Message, state: FSMContext):
    group = message.text
    telegrams = ''
    tgs = db.get_telegrams_for_alert(group)

    async with state.proxy() as data:
        data['group'] = group
        data['telegrams'] = tgs
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=keyboards.rm_kb)
    await MakeAlert.next()


@dp.message_handler(state=MakeAlert.MakeMessage)
async def make_alert_2(message: types.Message, state: FSMContext):
    msg = message.text
    async with state.proxy() as data:
        data['message'] = msg
        group = data['group']

    text = f"""
[–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è]

[–ì—Ä—É–ø–ø–∞]: {group}

[–°–æ–æ–±—â–µ–Ω–∏–µ]: {msg}
    """

    await message.answer(text, reply_markup=keyboards.edit_accept_cancel_kb)
    await MakeAlert.next()


@dp.message_handler(state=MakeAlert.Accept)
async def make_alert_3(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        async with state.proxy() as data:
            telegrams = data['telegrams']
            msg = data['message']

        tutor = db.get_me(message.from_user.id)
        if tutor[-1] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':

            text = f"""
    [–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è]
    –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {' '.join(tutor[:2])}
    
    –°–æ–æ–±—â–µ–Ω–∏–µ:
    {msg}
            """
        else:
            text = f"""
            [–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞]
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {' '.join(tutor[:2])}

            –°–æ–æ–±—â–µ–Ω–∏–µ:
            {msg}
                    """
        for i in telegrams:
            print(i[0])
            if i[0]:
                await bot.send_message(i[0], text)
        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-'+str(role))
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=keyboards.login_menu[str(role)])
    elif message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)':
        await MakeAlert.previous()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑')
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-'+ str(role))
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.login_menu[str(role)])


# ______________________ MAKE REPORT ______________________ #
@dp.message_handler(state=ReportState.MakeMessage)
async def report_state_1(message: types.Message, state: FSMContext):
    report = message.text
    async with state.proxy() as data:
        data['report'] = report
    text = f"""
[–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è]

[–°–æ–æ–±—â–µ–Ω–∏–µ]: 
{report}
        """
    await ReportState.next()
    await message.answer(text, reply_markup=keyboards.edit_accept_cancel_kb)


@dp.message_handler(state=ReportState.Accept)
async def report_state_2(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        async with state.proxy() as data:
            report = data['report']
        user_id = db.get_user_by_telegram(message.from_user.id)
        await state.finish()
        await state.reset_data()

        db.make_new_report(user_id, report)

        role = db.get_role(message.from_user.id)
        await state.set_state('auth-'+str(role))
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=keyboards.login_menu[str(role)])

    elif message.text == '‚úè –ò–∑–º–µ–Ω–∏—Ç—å (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)':
        await ReportState.previous()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')

    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await state.reset_data()
        role = db.get_role(message.from_user.id)
        await state.set_state('auth-'+str(role))
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboards.login_menu[str(role)])

# ______________________ SETTINGS ______________________ #
@dp.message_handler(state='settings')
async def settings(message: types.Message, state: FSMContext):
    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=keyboards.rm_kb)
        await state.set_state('change_firstname')

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é', reply_markup=keyboards.rm_kb)
        await state.set_state('change_lastname')

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥', reply_markup=keyboards.rm_kb)
        await state.set_state('change_birthday')

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É':
        await ChangeEmail.CheckPassword.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å', reply_markup=keyboards.rm_kb)

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å':
        await ChangePassword.OldPassword.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å', reply_markup=keyboards.rm_kb)

    elif message.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞':
        db.logout(message.from_user.id)
        await state.set_state('unauth')
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!', reply_markup=keyboards.unlogin_kb)

    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        role = str(db.get_role(message.from_user.id))
        await state.set_state('auth-'+role)
        await message.answer(message.text, reply_markup=keyboards.login_menu[role])


# ______________________ CHANGE_FIRST_NAME ______________________ #
@dp.message_handler(state='change_firstname')
async def change_firstname(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        db.change_user_firstname(message.text, message.from_user.id)
        await message.answer('–ò–º—è –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=keyboards.settings_kb)
        await state.set_state('settings')
    else:
        await message.answer('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞')


# ______________________ CHANGE_LAST_NAME ______________________ #
@dp.message_handler(state='change_lastname')
async def change_lastname(message: types.Message, state: FSMContext):
    if message.text.isalpha():
        db.change_user_lastname(message.text, message.from_user.id)
        await message.answer('–§–∞–º–∏–ª–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=keyboards.settings_kb)
        await state.set_state('settings')
    else:
        await message.answer('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–∞–º–∏–ª–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞')


# ______________________ CHANGE_BIRTHDAY ______________________ #
@dp.message_handler(state='change_birthday')
async def change_birthday(message: types.Message, state: FSMContext):
    s = [int(i) for i in reversed(message.text.split('.'))]
    try:
        d = date(*s)
        db.change_user_birthday(d, message.from_user.id)
        await message.answer('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=keyboards.settings_kb)
        await state.set_state('settings')

    except:
        await message.answer('–û—à–∏–±–∫–∞. –í–µ—Ä–æ—è—Ç–Ω–æ, –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã: 01.06.2022')


# ______________________ CHANGE_EMAIL ______________________ #
@dp.message_handler(state=ChangeEmail.CheckPassword)
async def change_email(message: types.Message, state: FSMContext):
    password = db.get_password(message.from_user.id)
    if encrypt_password(message.text) == password:
        async with state.proxy() as data:
            data['Email'] = message.text
        await ChangeEmail.next()

        await message.answer('–£—Å–ø–µ—à–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É (–Ω–∞ –Ω–µ–µ –ø—Ä–∏–¥–µ—Ç –∫–æ–¥-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await message.delete()


@dp.message_handler(state=ChangeEmail.NewEmail)
async def change_email(message: types.Message, state: FSMContext):
    code = generate_code(6)
    async with state.proxy() as data:
        data['Email'] = message.text
        data['EmailCode'] = code
    mail.send_email(TO=message.text, msg=mail.generate_reg_mail(message.text, code))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è')
    await ChangeEmail.next()


@dp.message_handler(state=ChangeEmail.CheckCode, commands='again')
async def change_email_again(message: types.Message, state: FSMContext):
    code = generate_code(length=4)
    async with state.proxy() as data:
        user_email = data['Email']
        data['EmailCode'] = code
    mail.send_email(TO=user_email, msg=mail.generate_reg_mail(user_email, code))
    await message.answer('–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')


@dp.message_handler(state=ChangeEmail.CheckCode)
async def change_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        code = data['EmailCode']
        email = data['Email']
    if code == message.text:
        db.change_user_email(email, message.from_user.id)
        await message.answer('–ü–æ—á—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=keyboards.settings_kb)
        await state.finish()
        await state.reset_data()
        await state.set_state('settings')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /again, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –µ—â–µ —Ä–∞–∑')


# ______________________ CHANGE_PASSWORD ______________________ #
@dp.message_handler(state=ChangePassword.OldPassword)
async def change_password(message: types.Message, state: FSMContext):
    oldpassword = db.get_password(message.from_user.id)
    if oldpassword == encrypt_password(message.text):

        await ChangePassword.next()
        await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑')
    await message.delete()


@dp.message_handler(state=ChangePassword.NewPassword)
async def change_password2(message: types.Message, state: FSMContext):

    if is_correct_password(message.text):
        async with state.proxy() as data:
            data['NewPassword'] = message.text

        await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑')
        await ChangePassword.next()
    else:
        await message.answer('–í –ø–∞—Ä–æ–ª–µ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏ —Ü–∏—Ñ—Ä—ã.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: 6 —Å–∏–º–≤–æ–ª–æ–≤\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑')

    await message.delete()


@dp.message_handler(state=ChangePassword.NewPassword2)
async def change_password3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        prev_password = data['NewPassword']
    if prev_password == message.text:
        db.change_user_password(encrypt_password(message.text), message.from_user.id)
        await message.answer('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=keyboards.settings_kb)
        await state.finish()
        await state.reset_data()
        await state.set_state('settings')
    else:
        await message.answer('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑')
        await ChangePassword.previous()
    await message.delete()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)